#include <bsp.h>
; -------------------------------------
;           MODULE Definitions
; -------------------------------------
            MODULE  HAL
            PUBLIC  Setup, LCDData, LCDCmd, LCDSentence, StartADC, StopADC
            PUBLIC  PORT1_ISR, ADC_ISR
            EXTERN  state
            EXTERN  SysSetup
            RSEG    CODE
; ------------------------------------
Delay       MACRO   x ; 3x+2 delay
            LOCAL   DelayL
            MOV     x, R15
DelayL      DEC     R15
            JNZ     DelayL
            ENDM
; ------------------------------------
Setup       CALL    #SysSetup
            CALL    #Lcd_Setup
            RET
; -------------------------------------
LCDData     POP.W   R15
            POP.B   R12
            PUSH.W  R15
            Delay   #1747 ; 5ms
            MOV.B   #0x00, LCDArrPort
            BIS.B   #LCD_RS, LCDControl
            MOV.B   R12, LCDArrPort
            CALL    #Lcd_strobe
            BIC.B   #LCD_RS, LCDControl
            RET
; -------------------------------------
LCDCmd      POP.W   R15 ;save adress
            POP.B   R12
            PUSH.W  R15
            Delay   #1747 ; 5ms
            MOV.B   R12, LCDArrPort
            CALL    #Lcd_strobe
            RET
; -------------------------------------
LCDSentence POP.W   R15 ;save adress
            POP.W   R11 ; pointer to sentence (DB)
            PUSH.W  R15
LCDSenL     PUSH.B  @R11+
            CALL    #LCDData
            CMP.B   #0, 0(R11)  ;check if sentence is over
            JNZ     LCDSenL
            RET
; -------------------------------------
Debounce    PUSH.W  R15
            MOV     debounceVal, R15
DLoop       DEC     R15
            JNZ     DLoop
            POP.W   R15
            RET
; -------------------------------------
Lcd_strobe  BIS.B   #LCD_E, LCDControl
            NOP
            NOP
            BIC.B   #LCD_E, LCDControl
            RET
; -------------------------------------
Lcd_Setup   BIC.B   #LCD_E+LCD_RS+LCD_RW, LCDControl
            Delay   #5243 ; 15ms
            MOV.B   #0x3F, LCDArrPort
            CALL    #Lcd_strobe
            PUSH.B  #0x3F
            CALL    #LCDCmd
            Delay   #70 ; 200us
            MOV.B   #0x3F, LCDArrPort
            CALL    #Lcd_strobe
            PUSH.B  #0x3C
            CALL    #LCDCmd
            PUSH.B  #0x0F
            CALL    #LCDCmd
            PUSH.B  #0x01
            CALL    #LCDCmd
            PUSH.B  #0x06
            CALL    #LCDCmd
            PUSH.B  #0x80
            CALL    #LCDCmd
            PUSH.B  #LCD_CursorResetL1
            CALL    #LCDCmd
            PUSH.B  #LCD_CursorOFF
            CALL    #LCDCmd
            RET
; -------------------------------------
StartADC    BIS.W   #ENC+ADC_SC, ADC_CONTROL0 ; Enable conversion, Start conversion
            RET
; -------------------------------------
StopADC     BIC.W   #ENC+ADC_SC, ADC_CONTROL0 ; Enable conversion, Start conversion
            RET
; -------------------------------------
PORT1_ISR   CALL    #Debounce ; debounce
            BIT.B   #PB0, PBsArrIntPend
            JNZ     P2_0
            BIT.B   #PB1, PBsArrIntPend
            JNZ     P2_1
            JMP     ExitP2ISR ; interrupt from another source, ignore
          
P2_0        CMP.B   #1, state
            JEQ     ExitP2ISR
            MOV.B   #1, state
            JMP     ExitP2LPM
P2_1        CMP.B   #2, state
            JEQ     ExitP2ISR
            MOV.B   #2, state

ExitP2LPM   BIC     #LPM4+GIE, 0(SP) ;wake up
ExitP2ISR   BIC.B   #PBs, PBsArrIntPend
            RETI
; -------------------------------------
ADC_ISR     BIT     #0, ADC_MEM           ;if there is sample inside mem
            BIC.W   #LPM0, 0(SP)          ;wake up
            RETI
; -------------------------------------
            ENDMOD
; -------------------------------------
            END
